library(ggplot2) # for plotting
library(plotly)
library(GGally) # for scatterplot matrices
library(gridExtra) # for arranging multiple plots together
library(car) # For Likelihood Ratio Tests on the fly
library(data.table) # to enable creation and coercion of data tables
library(stargazer) # to tabulate regression tables
library(skimr) # for basic EDA
library(knitr)
library(dplyr) # for coercing dataframes and summary statistic
# Import data
df = read.table("challenger.csv", header=T, sep=",")
# Present data
# kable(df)
# O-ring vs Temperature
ggplot(df[df$O.ring > 0,], aes(x=Temp, y=as.factor(O.ring))) +
geom_jitter(size = 1, alpha = 0.75, stroke=3, height=.05, width=.3) +
scale_x_continuous(name = "Temperature (°F)")+
scale_y_discrete(name = "Number of\nO-ring failures") +
theme_classic() +
theme(text = element_text(size = 12)) +
theme(legend.position = c(0.5, 1.05), legend.title=element_text(size=9), legend.text=element_text(size=7)) +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# Present data
kable(df)
# O-ring vs Temperature
ggplot(df, aes(x=Temp, y=as.factor(O.ring), colour=O.ring>0)) +
geom_jitter(size = 1, alpha = 0.75, stroke=3, height=.05, width=.3) +
scale_color_manual(labels = c("ommitted","considered"),
values = rev(c("black","grey"))) +
scale_x_continuous(name = "Temperature (°F)")+
scale_y_discrete(name = "Number of\nO-ring failures") +
#geom_rug(alpha=2/4, size=1, position="jitter") +
theme_classic() +
theme(text = element_text(size = 12)) +
labs(title=expression(color="Observations:"))+
theme(legend.position = c(0.5, 1.05), legend.title=element_text(size=9), legend.text=element_text(size=7)) +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
fig <- plot_ly(df, x = ~ Temp, y = ~ Pressure, z = ~ O.ringFactor,
color = ~ O.ringFactor,
colors = c('olivedrab', 'orange2',"orangered2"))
fig <- fig %>% add_markers()
fig <- fig %>% layout(title=" <b>Figure 5</b>: O-ring failures as a function of temperature (°F) and pressure",
scene = list(xaxis = list(title = 'Temperature (°F)'),
yaxis = list(title = 'Pressure'),
zaxis = list(title = 'Number of O-ring failures')))
fig
fig <- plot_ly(df, x = ~ Temp, y = ~ Pressure, z = ~ factor(O.ring),
color = ~ factor(O.ring),
colors = c('olivedrab', 'orange2',"orangered2"))
fig <- fig %>% add_markers()
fig <- fig %>% layout(title=" <b>Figure 5</b>: O-ring failures as a function of temperature (°F) and pressure",
scene = list(xaxis = list(title = 'Temperature (°F)'),
yaxis = list(title = 'Pressure'),
zaxis = list(title = 'Number of O-ring failures')))
fig
fig <- plot_ly(df, x = ~ Temp, y = ~ Pressure, z = ~ factor(O.ring),
color = ~ factor(O.ring),
colors = c('olivedrab', 'orange2',"orangered2"))
fig <- fig %>% add_markers()
fig <- fig %>% scene = list(xaxis = list(title = 'Temperature (°F)'),
yaxis = list(title = 'Pressure'),
zaxis = list(title = 'Number of O-ring failures'))
fig <- plot_ly(df, x = ~ Temp, y = ~ Pressure, z = ~ factor(O.ring),
color = ~ factor(O.ring),
colors = c('olivedrab', 'orange2',"orangered2"))
fig <- fig %>% add_markers()
fig <- fig %>% layout(title=" ",
scene = list(xaxis = list(title = 'Temperature (°F)'),
yaxis = list(title = 'Pressure'),
zaxis = list(title = 'Number of O-ring failures')))
fig
# Create new variable Fail for binary model
df["Fail"] <- ifelse(df$O.ring>=1, 1, 0)
# Estimate a binomial logistic regression model
model_binomial <- glm(O.ring/Number ~ Temp + Pressure,
family = binomial(link = logit),
weights = Number, data = df)
# Estimate binary logistic regression model
model_binary <- glm(Fail ~ Temp + Pressure,
family = binomial(link = logit),
data = df)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary, type="text")
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary, type="html")
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text", title="Regression Results")
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text")
# Create new variable Fail for binary model
df["Failure"] <- ifelse(df$O.ring>=1, 1, 0)
# Estimate a binomial logistic regression model
model_binomial <- glm(O.ring/Number ~ Temp + Pressure,
family = binomial(link = logit),
weights = Number, data = df)
# Estimate binary logistic regression model
model_binary <- glm(Fail ~ Temp + Pressure,
family = binomial(link = logit),
data = df)
# Estimate binary logistic regression model
model_binary <- glm(Failure ~ Temp + Pressure,
family = binomial(link = logit),
data = df)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text")
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",column.labels=c("Binomial","Binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("Binomial","Binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("No. of failed O-rings","O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("No. of \nfailed O-rings","O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("No. of \nnfailed O-rings","O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("No. of\n failed O-rings","O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("No. of failed O-rings","O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type="text",dep.var.labels=c("No. of failed O-rings","    O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "html",dep.var.labels=c("No. of failed O-rings","    O-ring failure"))
# Create new variable Fail for binary model
df["Failure"] <- ifelse(df$O.ring>=1, 1, 0)
# Estimate a binomial logistic regression model
model_binomial <- glm(O.ring/Number ~ Temp + Pressure,
family = binomial(link = logit),
weights = Number, data = df)
# Estimate binary logistic regression model
model_binary <- glm(Failure ~ Temp + Pressure,
family = binomial(link = logit),
data = df)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "html",dep.var.labels=c("No. of failed O-rings","    O-ring failure"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "html",dep.var.labels=FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "html",dep.var.labels=FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "html",dep.var.labels="")
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels="", multicolumn = FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels="", model.numbers = FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"), model.numbers = FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE, model.names = c("binomial","binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels="",
model.numbers = FALSE, model.names = c("binomial","binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels="",
model.numbers = FALSE, model.names = FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE, model.names = FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE,
dep.var.caption  = FALSE,
dep.var.labels   = "Flight delay (in minutes)"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE,
dep.var.caption  = "",
dep.var.labels   = "Flight delay (in minutes)"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE,
dep.var.caption  = " ",
dep.var.labels   = "Flight delay (in minutes)"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE,
dep.var.caption  = " ",
dep.var.labels   = "Flight delay (in minutes)")
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",dep.var.labels=c("binomial","binary"),
model.numbers = FALSE,
dep.var.caption  = " ")
binomial
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",
model.numbers = FALSE,
dep.var.labels = c("binomial","binary"),
dep.var.caption  = c("binomial","binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",
model.numbers = FALSE,
dep.var.caption  = c("binomial","binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",
model.numbers = FALSE,
dep.var.labels  = c("binomial","binary"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",
model.numbers = FALSE,
dep.var.labels  = c("binomial","binary"),
column.labels = c("Good", "Better"))
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary,
type = "text",
model.numbers = FALSE,
dep.var.labels  = c("binomial","binary"),
column.labels = c("No.of O-ring failures", "O-ring failure"))
# Inverse odds ratio for binomial model
1/exp(summary(model_binomial)$coefficients)
install.packages("mcprofile")
library(ggplot2) # for plotting
library(GGally) # for scatterplot matrices
library(gridExtra) # for arranging multiple plots together
library(car) # For Likelihood Ratio Tests on the fly
library(data.table) # to enable creation and coercion of data tables
library(stargazer) # to tabulate regression tables
library(skimr) # for basic EDA
library(mcprofile) # for profile likelihoods
library(dplyr) # for coercing dataframes and summary statistic
library(scatterplot3d) # For 3d scatterplot
install.packages("scatterplot3d")
library(ggplot2) # for plotting
library(GGally) # for scatterplot matrices
library(gridExtra) # for arranging multiple plots together
library(car) # For Likelihood Ratio Tests on the fly
library(data.table) # to enable creation and coercion of data tables
library(stargazer) # to tabulate regression tables
library(skimr) # for basic EDA
library(mcprofile) # for profile likelihoods
library(dplyr) # for coercing dataframes and summary statistic
library(scatterplot3d) # For 3d scatterplot
df = read.table("challenger.csv", header=T, sep=",")
# Structure
str(df)
# Summary
summary(df)
# Unique values
lapply(df[c('Temp','Pressure','O.ring')], unique)
# O.ring distribution
plot_oring = ggplot(as.data.frame(table(df)),
aes(x = as.factor(O.ring), y = Freq, colour=O.ring>0)) +
geom_bar(stat="identity", width=0.1, alpha =0.7, color = "black", fill= "olivedrab") +
scale_x_discrete(name = "Number of O-ring failures")+
scale_y_continuous(name = "Counts")+
theme_classic() +
theme(text = element_text(size = 12)) +
labs(title=expression(~bold('Figure 1')), subtitle='(a)') +
theme(legend.position = "top") +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# Temperature distribution
plot_temp = ggplot(df, aes(x = Temp)) +
geom_histogram(binwidth = 1, fill="olivedrab", colour="black", alpha=0.7) +
labs(title=" ", subtitle='(b)') +
scale_x_continuous(name = "Temperature (°F)")+
scale_y_continuous(name = " ")+
theme(plot.title = element_text(lineheight=1)) +
theme_classic()+
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# Pressure distribution
plot_pressure = ggplot(df, aes(x = Pressure)) +
geom_histogram(binwidth = 5, fill="olivedrab", colour="black", alpha=0.7) +
labs(title=" ", subtitle='(c)') +
scale_x_continuous(name = "Pressure")+
scale_y_continuous(name = " ")+
theme(plot.title = element_text(lineheight=1)) +
theme_classic() +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# Figure 1
grid.arrange(plot_oring, plot_temp, plot_pressure, nrow=1)
# O-ring vs Temperature
plot_temp_o = ggplot(df, aes(x=Temp, y=as.factor(O.ring), colour=O.ring>0)) +
geom_jitter(size = 1, alpha = 0.75, stroke=3, height=.05, width=.3) +
scale_color_manual(labels = c("ignored by NASA","used by NASA"),
values = rev(c("black","olivedrab"))) +
scale_x_continuous(name = "Temperature (°F)")+
scale_y_discrete(name = "Number of\nO-ring failures") +
geom_rug(alpha=2/4, size=1, position="jitter") +
theme_classic() +
theme(text = element_text(size = 12)) +
labs(title=expression(~bold('Figure 2')),subtitle="(a)",color="Observations:")+
theme(legend.position = c(0.5, 1.05), legend.title=element_text(size=9), legend.text=element_text(size=7)) +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# O-ring vs Pressure
plot_pressure_o = ggplot(df, aes(x=Pressure, y=as.factor(O.ring), colour=O.ring>0)) +
geom_jitter(size=2, pch=20, alpha=3/4, stroke=3, position=position_jitter(w=0.2, h=0.1))+
scale_color_manual(labels = c("ignored by NASA","used by NASA"),
values = rev(c("black","olivedrab"))) +
scale_x_continuous(name = "Pressure (psi)")+
scale_y_discrete(name = "Number of\nO-ring failures") +
geom_rug(alpha=2/4, size=1, position="jitter") +
theme_classic() +
theme(text = element_text(size = 12)) +
labs(title=" ", subtitle='(b)')+
theme(legend.position = "none") +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# O-ring vs Flight number
plot_number_o = ggplot(df, aes(x=Flight, y=as.factor(O.ring), colour=O.ring>0)) +
geom_jitter(size=3, pch=20, alpha=3/4, stroke=3, position=position_jitter(w=0.2, h=0.1))+
scale_color_manual(labels = c("ignored by NASA","used by NASA"),
values = rev(c("black","olivedrab"))) +
scale_x_continuous(name = "Flight number")+
scale_y_discrete(name = "Number of\nO-ring failures") +
geom_rug(alpha=2/4, size=1, position="jitter") +
theme_classic() +
theme(text = element_text(size = 12)) +
labs(title=" ", subtitle='(c)')+
theme(legend.position = "none") +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# Figure 2
grid.arrange(plot_temp_o, plot_pressure_o, plot_number_o, nrow=3)
# Figure 3
colors <- c("olivedrab", "orange", "red")
colors <- colors[as.numeric(df$O.ring)+1]
ggplot(df, aes(x=Temp, y=Pressure, colour=colors)) +
geom_jitter(size=3, pch=20, alpha=0.5, stroke=3, position=position_jitter(w=1, h=1))+
scale_color_manual(labels = c("Zero","One",'Two'),
values = c("olivedrab", "orange", "red")) +
scale_x_continuous(name = "Temperature (°F)")+
scale_y_continuous(name = "Pressure (psi)") +
theme_classic() +
theme(text = element_text(size = 12)) +
labs(title=expression(~bold('Figure 3')), color="O-ring failures") +
theme(legend.position = "top") +
theme(plot.title = element_text(hjust=0)) +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
# Create new variable Fail for binary model
df["Fail"] <- ifelse(df$O.ring>=1, 1, 0)
# Estimate a binomial logistic regression model
model_binomial <- glm(O.ring/Number ~ Temp + Pressure,
family = binomial(link = logit),
weights = Number, data = df)
# Estimate binary logistic regression model
model_binary <- glm(Fail ~ Temp + Pressure,
family = binomial(link = logit),
data = df)
# Summary of coefficients, standard errors and p-values
stargazer(model_binomial, model_binary, type="text")
# Inverse odds ratio for binomial model
1/exp(summary(model_binomial)$coefficients)
# Inverse odds ratio for binary model
1/exp(summary(model_binary)$coefficients)
